var documenterSearchIndex = {"docs":
[{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"DocTestSetup = quote\n    using ARCHModels    \nend","category":"page"},{"location":"multivariatetypehierarchy/#Multivariate","page":"Multivariate","title":"Multivariate","text":"","category":"section"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"Analogously to the univariate case, an instance of MultivariateARCHModel contains a matrix of data (with observations in rows and assets in columns), and encapsulates information about the covariance specification (e.g., CCC or DCC), the mean specification, and the error distribution.","category":"page"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"MultivariateARCHModels support many of the same methods as UnivariateARCHModels, with a few noteworthy differences: the prediction targets for predict are :covariances and :correlations for predicting Sigma_t and R_t, respectively, and the new functions covariances and correlations respectively return the in-sample estimates of Sigma_t and R_t.","category":"page"},{"location":"multivariatetypehierarchy/#covspec","page":"Multivariate","title":"Covariance specifications","text":"","category":"section"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"The dynamics of Sigma_t  are modelled as subtypes of MultivariateVolatilitySpec.","category":"page"},{"location":"multivariatetypehierarchy/#Conditional-correlation-models","page":"Multivariate","title":"Conditional correlation models","text":"","category":"section"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"The main challenge in multivariate ARCH modelling is the curse of dimensionality: allowing each of the (d)(d+1)2 elements of Sigma_t to depend on the past returns of all d other assets requires O(d^4) parameters without imposing additional structure. Conditional correlation models approach this issue by decomposing Sigma_t as","category":"page"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"Sigma_t=D_t R_t D_t","category":"page"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"where R_t is the conditional correlation matrix and D_t is a diagonal matrix containing the volatilities of the individual assets, which are modelled as univariate ARCH processes.","category":"page"},{"location":"multivariatetypehierarchy/#DCC","page":"Multivariate","title":"DCC","text":"","category":"section"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"The dynamic conditional correlation (DCC) model of Engle (2002) imposes a GARCH-type structure on the R_t. In particular, for a DCC(p, q) model (with covariance targeting),","category":"page"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"R_ij t = fracQ_ijtsqrtQ_iitQ_jjt","category":"page"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"where","category":"page"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"Q_t equivbarQ(1-baralpha-barbeta)+sum_i=1^p beta_iQ_t-i+sum_i=1^qalpha_iepsilon_t-iepsilon_t-i^mathrmscriptsize T","category":"page"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"baralphaequivsum_i=1^qalpha_i, barbetaequivsum_i=1^qbeta_i, epsilon_tequiv D_t^-1a_t, Q_t=mathrmcov (epsilon_tF_t-1), and barQ=mathrmcov(epsilon_t).","category":"page"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"It is available as DCC{p, q}. The constructor takes as inputs barQ, a vector of coefficients, and a vector of UnivariateARCHModels:","category":"page"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"julia> DCC{1, 1}([1. .5; .5 1.], [.9, .05], [GARCH{1, 1}([1., .9, .05]) for _ in 1:2])\nDCC{1, 1, GARCH{1, 1}} specification.\n\n──────────────────────\n              β₁    α₁\n──────────────────────\nParameters:  0.9  0.05\n──────────────────────","category":"page"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"The DCC model is typically estimated in two steps, by first fitting univariate ARCH models to the individual assets and saving the standardized residuals epsilon_t, and then estimating the DCC parameters from those. Engle (2002) provides the details and expressions for the standard errors. By default, this package employs an alternative estimator due to Engle, Ledoit, and Wolf (2019) which is better suited to large-dimensional problems. It achieves this by i) estimating barQ with a nonlinear shrinkage estimator instead of the sample covariance of epsilon_t, and ii) estimating the DCC parameters by maximizing the sum of the pairwise log-likelihoods, rather than the joint log-likelihood over all assets, thereby avoiding the inversion of large matrices during the optimization. The estimation method is controlled by passing the method keyword to the constructor. Possible values are :largescale (the default), and :twostep.","category":"page"},{"location":"multivariatetypehierarchy/#CCC","page":"Multivariate","title":"CCC","text":"","category":"section"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"The CCC (constant conditional correlation) model of Bollerslev (1990) models R_t=R as constant. It is the special case of the DCC model in which p=q=0:","category":"page"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"julia> CCC == DCC{0, 0}\ntrue","category":"page"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"As such, the constructor has the exact same signature, except that the DCC parameters must be passed as a zero-length vector:","category":"page"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"julia> CCC([1. .5; .5 1.], Float64[], [GARCH{1, 1}([1., .9, .05]) for _ in 1:2])\nDCC{0, 0, GARCH{1, 1}} specification.\n\nNo estimable parameters.","category":"page"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"As for the DCC model, the constructor accepts a method keyword argument with possible values :largescale (default) or :twostep that determines whether R will be estimated by nonlinear shrinkage or the sample correlation of the epsilon_t.","category":"page"},{"location":"multivariatetypehierarchy/#mvmeanspec","page":"Multivariate","title":"Mean Specifications","text":"","category":"section"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"The conditional mean of a MultivariateARCHModel is specified by a vector of MeanSpecs as described under Mean specifications.","category":"page"},{"location":"multivariatetypehierarchy/#mvdistspec","page":"Multivariate","title":"Multivariate Standardized Distributions","text":"","category":"section"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"Multivariate standardized distributions subtype MultivariateStandardizedDistribution. Currently, only MultivariateStdNormal is available. Note that under mild assumptions, the Gaussian (quasi-)MLE consistently estimates the (multivariate) ARCH parameters even if Gaussianity is violated.","category":"page"},{"location":"multivariatetypehierarchy/","page":"Multivariate","title":"Multivariate","text":"DocTestSetup = nothing\nDocTestFilters = nothing","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"DocTestSetup = quote\n    using Random\n    Random.seed!(1)\n    using InteractiveUtils: subtypes\nend\nDocTestFilters = r\".*[0-9\\.]\"","category":"page"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/#Preliminaries","page":"Usage","title":"Preliminaries","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"We focus on univariate ARCH models for most of this section. Multivariate models work quite similarly; the few differences are discussed in Multivariate models. We will be using the data from Bollerslev and Ghysels (1986), available as the constant BG96. The data consist of daily German mark/British pound exchange rates (1974 observations) and are often used in evaluating implementations of (G)ARCH models (see, e.g., Brooks et.al. (2001). We begin by convincing ourselves that the data exhibit ARCH effects; a quick and dirty way of doing this is to look at the sample autocorrelation function of the squared returns:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> using ARCHModels\n\njulia> autocor(BG96.^2, 1:10, demean=true) # re-exported from StatsBase\n10-element Array{Float64,1}:\n 0.22294073831639766\n 0.17663183540117078\n 0.14086005904595456\n 0.1263198344036979\n 0.18922204038617135\n 0.09068404029331875\n 0.08465365332525085\n 0.09671690899919724\n 0.09217329577285414\n 0.11984168975215709","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Using a critical value of 196sqrt1974=0044, we see that there is indeed significant autocorrelation in the squared series.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"A more formal test for the presence of volatility clustering is Engle's (1982) ARCH-LM test. The test statistic is given by LMequiv TR^2_aux, where R^2_aux is the coefficient of determination in a regression of the squared returns on an intercept and p of their own lags. The test statistic follows a chi^2_p distribution under the null of no volatility clustering.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> ARCHLMTest(BG96, 1)\nARCH LM test for conditional heteroskedasticity\n-----------------------------------------------\nPopulation details:\n    parameter of interest:   T⋅R² in auxiliary regression\n    value under h_0:         0\n    point estimate:          98.12107516935244\n\nTest summary:\n    outcome with 95% confidence: reject h_0\n    p-value:                     <1e-22\n\nDetails:\n    sample size:                    1974\n    number of lags:                 1\n    LM statistic:                   98.12107516935244","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The null is strongly rejected, again providing evidence for the presence of volatility clustering.","category":"page"},{"location":"usage/#Estimation","page":"Usage","title":"Estimation","text":"","category":"section"},{"location":"usage/#Standalone-Models","page":"Usage","title":"Standalone Models","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Having established the presence of volatility clustering, we can begin by fitting the workhorse model of volatility modeling, a GARCH(1, 1) with standard normal errors;  for other model classes such as EGARCH, see the section on volatility specifications.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> fit(GARCH{1, 1}, BG96)\n\nTGARCH{0,1,1} model with Gaussian errors, T=1974.\n\nMean equation parameters:\n───────────────────────────────────────────────\n      Estimate   Std.Error    z value  Pr(>|z|)\n───────────────────────────────────────────────\nμ  -0.00616637  0.00920152  -0.670147    0.5028\n───────────────────────────────────────────────\n\nVolatility parameters:\n─────────────────────────────────────────────\n     Estimate   Std.Error   z value  Pr(>|z|)\n─────────────────────────────────────────────\nω   0.0107606  0.00649303   1.65725    0.0975\nβ₁  0.805875   0.0724765   11.1191     <1e-27\nα₁  0.153411   0.0536404    2.86       0.0042\n─────────────────────────────────────────────","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"This returns an instance of UnivariateARCHModel, as described in the section Working with UnivariateARCHModels. The parameters alpha_1 and beta_1 in the volatility equation are highly significant, again confirming the presence of volatility clustering. The standard errors are from a robust (sandwich) estimator of the variance-covariance matrix. Note also that the fitted values are the same as those found by Bollerslev and Ghysels (1986) and Brooks et.al. (2001) for the same dataset.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The fit method supports a number of keyword arguments; the full signature is","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"fit(::Type{<:UnivariateVolatilitySpec}, data::Vector; dist=StdNormal, meanspec=Intercept, algorithm=BFGS(), autodiff=:forward, kwargs...)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Their meaning is as follows:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"dist: the error distribution. A subtype (not instance) of StandardizedDistribution; see Section Distributions.\nmeanspec=Intercept: the mean specification. Either a subtype of MeanSpec or an instance thereof (for specifications that require additional data, such as Regression; see the section on mean specification). If the mean specification in question has a notion of sample size (like Regression), then the sample size should match that of the data, or an error will be thrown. As an example,","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> X = ones(length(BG96), 1);\n\njulia> reg = Regression(X);\n\njulia> fit(GARCH{1, 1}, BG96; meanspec=reg)\n\nTGARCH{0,1,1} model with Gaussian errors, T=1974.\n\nMean equation parameters:\n────────────────────────────────────────────────\n       Estimate   Std.Error    z value  Pr(>|z|)\n────────────────────────────────────────────────\nβ₀  -0.00616637  0.00920152  -0.670147    0.5028\n────────────────────────────────────────────────\n\nVolatility parameters:\n─────────────────────────────────────────────\n     Estimate   Std.Error   z value  Pr(>|z|)\n─────────────────────────────────────────────\nω   0.0107606  0.00649303   1.65725    0.0975\nβ₁  0.805875   0.0724765   11.1191     <1e-27\nα₁  0.153411   0.0536404    2.86       0.0042\n─────────────────────────────────────────────","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Here, both reg and BG86 contain 1974 observations. Notice that because in this case X contains only a column of ones, the estimation results are equivalent to those obtained with fit(GARCH{1, 1}, BG96; meanspec=Intercept) above; the latter is however more memory efficient, as no design matrix needs to be stored.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The remaining keyword arguments are passed on to the optimizer.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"As an example, an EGARCH(1, 1, 1) model without intercept and with  Student's t errors is fitted as follows:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> fit(EGARCH{1, 1, 1}, BG96; meanspec=NoIntercept, dist=StdT)\n\nEGARCH{1, 1, 1} model with Student's t errors, T=1974.\n\n\nVolatility parameters:\n──────────────────────────────────────────────\n      Estimate  Std.Error    z value  Pr(>|z|)\n──────────────────────────────────────────────\nω   -0.0162014  0.0186806  -0.867286    0.3858\nγ₁  -0.0378454  0.018024   -2.09972     0.0358\nβ₁   0.977687   0.012558   77.8538      <1e-99\nα₁   0.255804   0.0625497   4.08961     <1e-04\n──────────────────────────────────────────────\n\nDistribution parameters:\n─────────────────────────────────────────\n   Estimate  Std.Error  z value  Pr(>|z|)\n─────────────────────────────────────────\nν   4.12423    0.40059  10.2954    <1e-24\n─────────────────────────────────────────","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"An alternative approach to fitting a UnivariateVolatilitySpec to BG96 is to first construct a UnivariateARCHModel containing the data, and then using fit! to modify it in place:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> spec = GARCH{1, 1}([1., 0., 0.]);\n\njulia>  am = UnivariateARCHModel(spec, BG96)\n\nTGARCH{0,1,1} model with Gaussian errors, T=1974.\n\n\n────────────────────────────────────────\n                             ω   β₁   α₁\n────────────────────────────────────────\nVolatility parameters:     1.0  0.0  0.0\n────────────────────────────────────────\n\n\njulia> fit!(am)\n\nTGARCH{0,1,1} model with Gaussian errors, T=1974.\n\n\nVolatility parameters:\n─────────────────────────────────────────────\n     Estimate   Std.Error   z value  Pr(>|z|)\n─────────────────────────────────────────────\nω   0.0108661  0.00657261   1.65324    0.0983\nβ₁  0.804431   0.0730161   11.0172     <1e-27\nα₁  0.154597   0.0539139    2.86747    0.0041\n─────────────────────────────────────────────","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Note that fit! will also modify the volatility (and mean and distribution) specifications:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> spec\nTGARCH{0,1,1} specification.\n\n──────────────────────────────────────────\n                     ω        β₁        α₁\n──────────────────────────────────────────\nParameters:  0.0108661  0.804431  0.154597\n──────────────────────────────────────────","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Calling fit(am) will return a new instance of UnivariateARCHModel instead:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> am2 = fit(am);\n\njulia> am2 === am\nfalse\n\njulia> am2.spec.coefs == am.spec.coefs\ntrue","category":"page"},{"location":"usage/#Integration-with-GLM.jl","page":"Usage","title":"Integration with GLM.jl","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Assuming the GLM (and possibly DataFrames) packages are installed, it is also possible to pass a LinearModel (or TableRegressionModel) to fit instead of a data vector. This is equivalent to using a Regression as a mean specification. In the following example, we fit a linear model with GARCH{1, 1} errors, where the design matrix consists of a breaking intercept and time trend:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> using GLM, DataFrames\n\njulia> data = DataFrame(B=[ones(1000); zeros(974)], T=1:1974, Y=BG96);\n\njulia> model = lm(@formula(Y ~ B*T), data);\n\njulia> fit(GARCH{1, 1}, model)\n\nGARCH{1, 1} model with Gaussian errors, T=1974.\n\nMean equation parameters:\n────────────────────────────────────────────────────────\n                Estimate   Std.Error   z value  Pr(>|z|)\n────────────────────────────────────────────────────────\n(Intercept)   0.0610079   0.0598973    1.01854    0.3084\nB            -0.104142    0.0660947   -1.57565    0.1151\nT            -3.79532e-5  3.61469e-5  -1.04997    0.2937\nB & T         8.11722e-5  4.95122e-5   1.63944    0.1011\n────────────────────────────────────────────────────────\n\nVolatility parameters:\n─────────────────────────────────────────────\n     Estimate   Std.Error   z value  Pr(>|z|)\n─────────────────────────────────────────────\nω   0.0103294  0.00591883   1.74518    0.0810\nβ₁  0.808781   0.066084    12.2387     <1e-33\nα₁  0.152648   0.0499813    3.0541     0.0023\n─────────────────────────────────────────────","category":"page"},{"location":"usage/#Model-selection","page":"Usage","title":"Model selection","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The function selectmodel can be used for automatic model selection, based on an information crititerion. Given a class of model (i.e., a subtype of UnivariateVolatilitySpec), it will return a fitted UnivariateARCHModel, with the lag length parameters (i.e., p and q in the case of GARCH) chosen to minimize the desired criterion. The BIC is used by default.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"As an example, the following selects the optimal (minimum AIC) EGARCH(o, p, q) model, where o, p, q < 2,  assuming t distributed errors.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> selectmodel(EGARCH, BG96; criterion=aic, maxlags=2, dist=StdT)\n\nEGARCH{1, 1, 2} model with Student's t errors, T=1974.\n\nMean equation parameters:\n─────────────────────────────────────────────\n     Estimate   Std.Error   z value  Pr(>|z|)\n─────────────────────────────────────────────\nμ  0.00196126  0.00695292  0.282077    0.7779\n─────────────────────────────────────────────\n\nVolatility parameters:\n───────────────────────────────────────────────\n      Estimate  Std.Error     z value  Pr(>|z|)\n───────────────────────────────────────────────\nω   -0.0031274  0.0112456   -0.278101    0.7809\nγ₁  -0.0307681  0.0160754   -1.91398     0.0556\nβ₁   0.989056   0.0073654  134.284       <1e-99\nα₁   0.421644   0.0678139    6.21767     <1e-09\nα₂  -0.229068   0.0755326   -3.0327      0.0024\n───────────────────────────────────────────────\n\nDistribution parameters:\n─────────────────────────────────────────\n   Estimate  Std.Error  z value  Pr(>|z|)\n─────────────────────────────────────────\nν   4.18795   0.418697  10.0023    <1e-22\n─────────────────────────────────────────","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Passing the keyword argument show_trace=true will show the criterion for each model after it is estimated.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Any unspecified lag length parameters in the mean specification (e.g., p and q for ARMA) will be optimized over as well:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> selectmodel(ARCH, BG96;  meanspec=AR, maxlags=2, minlags=0)\n\nTGARCH{0,0,2} model with Gaussian errors, T=1974.\n\nMean equation parameters:\n───────────────────────────────────────────────\n      Estimate   Std.Error    z value  Pr(>|z|)\n───────────────────────────────────────────────\nc  -0.00681363  0.00979192  -0.695843    0.4865\n───────────────────────────────────────────────\n\nVolatility parameters:\n───────────────────────────────────────────\n    Estimate   Std.Error  z value  Pr(>|z|)\n───────────────────────────────────────────\nω   0.119455  0.00995804  11.9959    <1e-32\nα₁  0.314089  0.0578241    5.4318    <1e-7\nα₂  0.183502  0.0455194    4.0313    <1e-4\n───────────────────────────────────────────","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Here, an ARCH(2) without AR terms model was selected; this is possible because we specified minlags=0 (the default is 1). Note that jointly optimizing over the lag lengths of both the mean and volatility specification can result in an explosion of the number of models that must be estimated; e.g., selecting the best model from the class of TGARCH{o, p, q}-ARMA{p, q} models results in 5^mathbfmaxlags models being estimated. It may be preferable to fix the lag length of the mean specification: am = selectmodel(ARCH, BG96;  meanspec=AR{1}) considers only ARCH(q)-AR(1) models. The number of models to be estimated can also be reduced by specifying a value for minlags that is greater than the default of 1.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Similarly, one may restrict the lag length of the volatility specification and select only among different mean specifications. E.g., the following will select the best ARMA{p, q} specification with constant variance:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> am = selectmodel(ARCH{0}, BG96;  meanspec=ARMA)\n\nTGARCH{0,0,0} model with Gaussian errors, T=1974.\n\nMean equation parameters:\n─────────────────────────────────────────────\n      Estimate  Std.Error   z value  Pr(>|z|)\n─────────────────────────────────────────────\nc   -0.0266446  0.0174716  -1.52502    0.1273\nφ₁  -0.621838   0.160741   -3.86857    0.0001\nθ₁   0.643588   0.154303    4.17095    <1e-4\n─────────────────────────────────────────────\n\nVolatility parameters:\n─────────────────────────────────────────\n   Estimate  Std.Error  z value  Pr(>|z|)\n─────────────────────────────────────────\nω  0.220848  0.0118061  18.7063    <1e-77\n─────────────────────────────────────────","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"In this case, an ARMA(1, 1) specification was selected. As a convenience, the above can equivalently achieved using selectmodel(ARMA, BG96).","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"As a final example, a construction like the following can be used to automatically select not just the lag length, but also the class of GARCH model and the error distribution:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> models = [selectmodel(VS, BG96; dist=D, minlags=1, maxlags=2)\n                 for VS in subtypes(UnivariateVolatilitySpec),\n                 D in setdiff(subtypes(StandardizedDistribution), [Standardized])];\n\njulia> best_model = models[findmin(bic.(models))[2]]\n\nEGARCH{1,1,2} model with Hansen's Skewed t errors, T=1974.\n\nMean equation parameters:\n──────────────────────────────────────────────\n      Estimate   Std.Error   z value  Pr(>|z|)\n──────────────────────────────────────────────\nμ  -0.00875068  0.00799958  -1.09389    0.2740\n──────────────────────────────────────────────\n\nVolatility parameters:\n─────────────────────────────────────────────────\n       Estimate   Std.Error     z value  Pr(>|z|)\n─────────────────────────────────────────────────\nω   -0.00459084  0.011674     -0.393253    0.6941\nγ₁  -0.0316575   0.0163004    -1.94213     0.0521\nβ₁   0.987834    0.00762841  129.494       <1e-99\nα₁   0.410542    0.0683002     6.01085     <1e-8\nα₂  -0.212549    0.0753432    -2.82107     0.0048\n─────────────────────────────────────────────────\n\nDistribution parameters:\n────────────────────────────────────────────\n     Estimate  Std.Error   z value  Pr(>|z|)\n────────────────────────────────────────────\nν   4.28215     0.441225   9.70513    <1e-21\nλ  -0.0908645   0.032503  -2.79558    0.0052\n────────────────────────────────────────────","category":"page"},{"location":"usage/#Value-at-Risk","page":"Usage","title":"Value at Risk","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"One of the primary uses of ARCH models is for estimating and forecasting Value at Risk. Basic in-sample estimates for the Value at Risk implied by an estimated UnivariateARCHModel can be obtained using VaRs:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using ARCHModels\nisdir(\"assets\") || mkdir(\"assets\")","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"am = fit(GARCH{1, 1}, BG96);\nvars = VaRs(am, 0.05);\nusing Plots\nplot(-BG96, legend=:none, xlabel=\"\\$t\\$\", ylabel=\"\\$-r_t\\$\");\nplot!(vars, color=:purple);\nENV[\"GKSwstype\"]=\"svg\"; savefig(joinpath(\"assets\", \"VaRplot.svg\")); nothing # hide","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: VaR Plot)","category":"page"},{"location":"usage/#Forecasting","page":"Usage","title":"Forecasting","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The predict(am::UnivariateARCHModel) method can be used to construct one-step ahead forecasts for a number of quantities. Its signature is","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"    predict(am::UnivariateARCHModel, what=:volatility, horizon=1; level=0.01)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The optional argument what controls which object is predicted; the choices are :volatility (the default), :variance, :return, and :VaR. The forecast horizon is controlled by the optional argument horizon, and the VaR level with the keyword argument level. Note that when horizon is greater than 1, only the value at the horizon is returned, not the intermediate predictions; if you need those, use broadcasting:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> am = fit(GARCH{1, 1}, BG96);\n\njulia>  predict.(am, :variance, 1:3)\n3-element Vector{Float64}:\n 0.14708779684765233\n 0.15185983792481744\n 0.15643758950119205","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Not all prediction targets and models support multi-step forecasts.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"One way to use predict is in a backtesting exercise. The following code snippet constructs out-of-sample VaR forecasts for the BG96 data by re-estimating the model in a rolling window fashion, and then tests the correctness of the VaR specification with DQTest.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"T = length(BG96);\nwindowsize = 1000;\nvars = similar(BG96);\nfor t = windowsize+1:T-1\n    m = fit(GARCH{1, 1}, BG96[t-windowsize:t]);\n    vars[t+1] = predict(m, :VaR; level=0.05);\nend\nDQTest(BG96[windowsize+1:end], vars[windowsize+1:end], 0.05)\n\n# output\nEngle and Manganelli's (2004) DQ test (out of sample)\n-----------------------------------------------------\nPopulation details:\n    parameter of interest:   Wald statistic in auxiliary regression\n    value under h_0:         0\n    point estimate:          2.5272613188161177\n\nTest summary:\n    outcome with 95% confidence: fail to reject h_0\n    p-value:                     0.4704\n\nDetails:\n    sample size:                    974\n    number of lags:                 1\n    VaR level:                      0.05\n    DQ statistic:                   2.5272613188161177","category":"page"},{"location":"usage/#Model-diagnostics-and-specification-tests","page":"Usage","title":"Model diagnostics and specification tests","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Testing volatility models in general relies on the estimated conditional volatilities hatsigma_t and the standardized residuals hatz_tequiv (r_t-hatmu_t)hatsigma_t, accessible via volatilities(::UnivariateARCHModel) and residuals(::UnivariateARCHModel), respectively. The non-standardized residuals hatu_tequiv r_t-hatmu_t can be obtained by passing standardized=false as a keyword argument to residuals.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"One possibility to test a volatility specification is to apply the ARCH-LM test to the standardized residuals. This is achieved by calling ARCHLMTest on the estimated UnivariateARCHModel:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> am = fit(GARCH{1, 1}, BG96);\n\njulia> ARCHLMTest(am, 4) # 4 lags in test regression.\nARCH LM test for conditional heteroskedasticity\n-----------------------------------------------\nPopulation details:\n    parameter of interest:   T⋅R² in auxiliary regression\n    value under h_0:         0\n    point estimate:          4.211230445141555\n\nTest summary:\n    outcome with 95% confidence: fail to reject h_0\n    p-value:                     0.3782\n\nDetails:\n    sample size:                    1974\n    number of lags:                 4\n    LM statistic:                   4.211230445141555","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"By default, the number of lags is chosen as the maximum order of the volatility specification (e.g., max(p q) for a GARCH(p, q) model). Here, the test does not reject, indicating that a GARCH(1, 1) specification is sufficient for modelling the volatility clustering (a common finding).","category":"page"},{"location":"usage/#Simulation","page":"Usage","title":"Simulation","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"To simulate from a UnivariateARCHModel, use simulate. You can either specify the UnivariateVolatilitySpec (and optionally the distribution and mean specification) and desired number of observations, or pass an existing UnivariateARCHModel. Use simulate! to modify the data in place. Example:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> am3 = simulate(GARCH{1, 1}([1., .9, .05]), 1000; warmup=500, meanspec=Intercept(5.), dist=StdT(3.))\n\nTGARCH{0,1,1} model with Student's t errors, T=1000.\n\n\n──────────────────────────────\n                             μ\n──────────────────────────────\nMean equation parameters:  5.0\n──────────────────────────────\n─────────────────────────────────────────\n                             ω   β₁    α₁\n─────────────────────────────────────────\nVolatility parameters:     1.0  0.9  0.05\n─────────────────────────────────────────\n──────────────────────────────\n                             ν\n──────────────────────────────\nDistribution parameters:   3.0\n──────────────────────────────\n\njulia> am4 = simulate(am3, 1000); # passing the number of observations is optional, the default being nobs(am3)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Care must be taken if the mean specification has a notion of sample size, as in the case of Regression: because the sample size must match that of the data to be simulated, one must pass warmup=0, or an error will be thrown. For example, am3 above could also have been simulated from as follows:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> reg = Regression([5], ones(1000, 1));\n\njulia> am3 = simulate(GARCH{1, 1}([1., .9, .05]), 1000; warmup=0, meanspec=reg, dist=StdT(3.))\n\nTGARCH{0,1,1} model with Student's t errors, T=1000.\n\n\n──────────────────────────────\n                            β₀\n──────────────────────────────\nMean equation parameters:  5.0\n──────────────────────────────\n─────────────────────────────────────────\n                             ω   β₁    α₁\n─────────────────────────────────────────\nVolatility parameters:     1.0  0.9  0.05\n─────────────────────────────────────────\n──────────────────────────────\n                             ν\n──────────────────────────────\nDistribution parameters:   3.0\n──────────────────────────────","category":"page"},{"location":"usage/#Multivariate-models","page":"Usage","title":"Multivariate models","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"In this section, we will be using the percentage returns on 29 stocks from the DJIA from 03/19/2008 through 04/11/2019, available as DOW29.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Fitting a multivariate ARCH model proceeds similarly to the univariate case, by passing the type of the multivariate ARCH specification to fit. If the lag length (and in the case of the DCC model, the univariate specification) is left unspecified, then these default to 1 (and GARCH); i.e., the following is equivalent to both fit(DCC{1, 1}, DOW29) and fit(DCC{1, 1, GARCH{1, 1}}, DOW29):","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> m = fit(DCC, DOW29[:, 1:2])\n\n2-dimensional DCC{1, 1} - TGARCH{0,1,1} - Intercept{Float64} specification, T=2785.\n\nDCC parameters, estimated by largescale procedure:\n─────────────────────\n        β₁         α₁\n─────────────────────\n  0.891288  0.0551542\n─────────────────────\n\nCalculating standard errors is expensive. To show them, use\n`show(IOContext(stdout, :se=>true), <model>)`","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The returned object is of type MultivariateARCHModel. Like UnivariateARCHModel, it implements most of the interface of StatisticalModel and hence behaves similarly, so this section documents only the major differences.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The standard errors are not calculated by default. As stated in the output, they can be shown as follows:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> show(IOContext(stdout, :se=>true), m)\n\n2-dimensional DCC{1, 1} - TGARCH{0,1,1} - Intercept{Float64} specification, T=2785.\n\nDCC parameters, estimated by largescale procedure:\n────────────────────────────────────────────\n     Estimate  Std.Error   z value  Pr(>|z|)\n────────────────────────────────────────────\nβ₁  0.891288   0.0434362  20.5195     <1e-92\nα₁  0.0551542  0.0207797   2.65423    0.0079\n────────────────────────────────────────────","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Alternatively, stderror(m) can be used. As in the univariate case, fit supports a number of keyword arguments. The full signature is","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"fit(spec, data: method=:largescale,  dist=MultivariateStdNormal, meanspec=Intercept,\n      algorithm=BFGS(), autodiff=:forward, kwargs...)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Their meaning is similar to the univariate case. In particular, meanspec can be any univariate mean specification, as described in under mean specification. Certain models support different estimation methods; in the case of the DCC model, these are :twostep and :largescale, which respectively refer to the methods of Engle (2002) and Engle, Ledoit, and Wolf (2019). The latter sacrifices some amount of statistical efficiency for much-improved computational speed and is the default.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Again paralleling the univariate case, one may also construct a MultivariateARCHModel by hand, and then call fit or fit! on it, but this is rather cumbersome, as it requires specifying all parameters of the covariance specification.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"One-step ahead forecasts of the covariance or correlation matrix are obtained by respectively passing what=:covariance (the default) or what=:correlation to predict:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> predict(m, what=:correlation)\n2×2 Array{Float64,2}:\n 1.0       0.436513\n 0.436513  1.0  ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"In the multivariate case, there are three types of residuals that can be considered: the unstandardized residuals, a_t; the devolatized residuals, epsilon_t, where epsilon_itequiv a_itsigma_it; and the decorrelated residuals z_tequiv Sigma^-12_ta_t. When called on a MultivariateARCHModel, residuals returns z_t by default. Passing decorrelated=false returns epsilon_t, and passing standardized=false returns  a_t (note that decorrelated=true implies standardized=true).","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"DocTestSetup = nothing\nDocTestFilters = nothing","category":"page"},{"location":"introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Consider a sample of daily asset returns r_t_tin1ldotsT. All models covered in this package share the same basic structure, in that they decompose the return into a conditional mean and a mean-zero innovation. In the univariate case,","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"r_t=mu_t+a_tquad mu_tequivmathbbEr_tmidmathcalF_t-1quad sigma_t^2equivmathbbEa_t^2midmathcalF_t-1","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"z_tequiv a_tsigma_t is identically and independently distributed according to some law with mean zero and unit variance, and mathcalF_t is the natural filtration of r_t (i.e., it encodes information about past returns). In the multivariate case, r_tinmathbbR^d, and the general model structure is","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"r_t=mu_t+a_tquad mu_tequivmathbbEr_tmidmathcalF_t-1quad Sigma_tequivmathbbEa_ta_t^mathrmscriptsize TmidmathcalF_t-1","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"ARCH models specify the conditional volatility sigma_t (or in the multivariate case, the conditional covariance matrix Sigma_t) in terms of past returns, conditional (co)variances, and potentially other variables.","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"This package represents an ARCH model as an instance of either UnivariateARCHModel or MultivariateARCHModel. These are subtypes ARCHModel and implement the interface of StatisticalModel from StatsBase.","category":"page"},{"location":"univariatetypehierarchy/#Univariate","page":"Univariate","title":"Univariate","text":"","category":"section"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"An instance of UnivariateARCHModel contains a vector of data (such as equity returns), and encapsulates information about the volatility specification (e.g., GARCH or EGARCH), the mean specification (e.g., whether an intercept is included), and the error distribution.","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"In general a univariate model can be written","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"r_t = mu_t + sigma_t z_t quad z_t stackreltextiidsim F","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"Hence, a univariate model is a triple of functions left(mu_t sigma_t F right). The table below lists current options for the conditional mean, conditional variance, and the error distribution.","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"mu_t sigma_t F\nNoIntercept ARCH{0} (constant) StdNormal\nIntercept ARCH{q} StdT\nARMA{p,q} GARCH{p,q} StdGED\nRegression(X) TGARCH{o,p,q} Std User-Defined\n EGARCH{o,p,q} ","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"Details on these options are given below.","category":"page"},{"location":"univariatetypehierarchy/#volaspec","page":"Univariate","title":"Volatility specifications","text":"","category":"section"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"Volatility specifications describe the evolution of sigma_t. They are modelled as subtypes of UnivariateVolatilitySpec. There is one type for each class of (G)ARCH model, parameterized by the number(s) of lags (e.g., p, q for a GARCH(p, q) model). For each volatility specification, the order of the parameters in the coefficient vector is such that all parameters pertaining to the first type parameter (p) appear before those pertaining to the second (q).","category":"page"},{"location":"univariatetypehierarchy/#ARCH","page":"Univariate","title":"ARCH","text":"","category":"section"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"With a_tequiv r_t-mu_t, the ARCH(q) volatility specification, due to Engle (1982), is","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"sigma_t^2=omega+sum_i=1^qalpha_i a_t-i^2 quad omega alpha_i0quad sum_i=1^q alpha_i1","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"The corresponding type is ARCH{q}. For example, an ARCH(2) model with ω=1, α₁=5, and α₂=4 is obtained with","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> using ARCHModels\n\njulia> ARCH{2}([1., .5, .4])\nTGARCH{0, 0, 2} specification.\n\n──────────────────────────\n               ω   α₁   α₂\n──────────────────────────\nParameters:  1.0  0.5  0.4\n──────────────────────────","category":"page"},{"location":"univariatetypehierarchy/#GARCH","page":"Univariate","title":"GARCH","text":"","category":"section"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"The GARCH(p, q) model, due to Bollerslev (1986), specifies the volatility as","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"sigma_t^2=omega+sum_i=1^pbeta_i sigma_t-i^2+sum_i=1^qalpha_i a_t-i^2 quad omega alpha_i beta_i0quad sum_i=1^max pq alpha_i+beta_i1","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"It is available as GARCH{p, q}:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> GARCH{1, 1}([1., .9, .05])\nGARCH{1, 1} specification.\n\n───────────────────────────\n               ω   β₁    α₁\n───────────────────────────\nParameters:  1.0  0.9  0.05\n───────────────────────────","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"This creates a GARCH(1, 1) specification with ω=1, β=9, and α=05.","category":"page"},{"location":"univariatetypehierarchy/#TGARCH","page":"Univariate","title":"TGARCH","text":"","category":"section"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"As may have been guessed from the output above, the ARCH and GARCH models are actually special cases of a more general class of models, known as TGARCH (Threshold GARCH), due to Glosten, Jagannathan, and Runkle (1993). The TGARCH{o, p, q} model takes the form","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"sigma_t^2=omega+sum_i=1^ogamma_i  a_t-i^2 1_a_t-i0+sum_i=1^pbeta_i sigma_t-i^2+sum_i=1^qalpha_i a_t-i^2 quad omega alpha_i beta_i gamma_i0 sum_i=1^max opq alpha_i+beta_i+gamma_i21","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"The TGARCH model allows the volatility to react differently (typically more strongly) to negative shocks, a feature known as the (statistical) leverage effect. Is available as TGARCH{o, p, q}:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> TGARCH{1, 1, 1}([1., .04, .9, .01])\nTGARCH{1, 1, 1} specification.\n\n─────────────────────────────────\n               ω    γ₁   β₁    α₁\n─────────────────────────────────\nParameters:  1.0  0.04  0.9  0.01\n─────────────────────────────────","category":"page"},{"location":"univariatetypehierarchy/#EGARCH","page":"Univariate","title":"EGARCH","text":"","category":"section"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"The EGARCH{o, p, q} volatility specification, due to Nelson (1991), is","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"log(sigma_t^2)=omega+sum_i=1^ogamma_i z_t-i+sum_i=1^pbeta_i log(sigma_t-i^2)+sum_i=1^qalpha_i (z_t-i-sqrt2pi) quad z_t=r_tsigma_tquad sum_i=1^pbeta_i1","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"Like the TGARCH model, it can account for the leverage effect. The corresponding type is EGARCH{o, p, q}:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> EGARCH{1, 1, 1}([-0.1, .1, .9, .04])\nEGARCH{1, 1, 1} specification.\n\n─────────────────────────────────\n                ω   γ₁   β₁    α₁\n─────────────────────────────────\nParameters:  -0.1  0.1  0.9  0.04\n─────────────────────────────────","category":"page"},{"location":"univariatetypehierarchy/#meanspec","page":"Univariate","title":"Mean specifications","text":"","category":"section"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"Mean specifications serve to specify mu_t. They are modelled as subtypes of MeanSpec. They contain their parameters as (possibly empty) vectors, but convenience constructors are provided where appropriate. The following specifications are available:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"A zero mean: mu_t=0. Available as NoIntercept:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> NoIntercept() # convenience constructor, eltype defaults to Float64\nNoIntercept{Float64}(Float64[])","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"An intercept: mu_t=mu. Available as Intercept:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> Intercept(3) # convenience constructor\nIntercept{Float64}([3.0])","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"A linear regression model: mu_t=mathbfx_t^mathrmscriptscriptstyle Tboldsymbolbeta. Available as Regression:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> X = ones(100, 1);\n\njulia> reg = Regression(X);","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"In this example, we created a regression model containing one regressor, given by a column of ones; this is equivalent to including an intercept in the model (see Intercept above). In general, the constructor should be passed a design matrix mathbfX containing mathbfx_t^mathrmscriptscriptstyle T_t=1ldots T as its rows; that is, for a model with T observations and k regressors, X would have dimensions Ttimes k.","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"Another way to create a linear regression with ARCH errors is to pass a LinearModel or DataFrameRegressionModel from GLM.jl to fit, as described under Integration with GLM.jl.","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"An ARMA(p, q) model: mu_t=c+sum_i=1^p varphi_i r_t-i+sum_i=1^q theta_i a_t-i. Available as ARMA{p, q}:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> ARMA{1, 1}([1., .9, -.1])\nARMA{1, 1, Float64}([1.0, 0.9, -0.1])","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"Pure AR(p) and MA(q) models are obtained as follows:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> AR{1}([1., .9])\nAR{1, Float64}([1.0, 0.9])\njulia> MA{1}([1., -.1])\nMA{1, Float64}([1.0, -0.1])","category":"page"},{"location":"univariatetypehierarchy/#Distributions","page":"Univariate","title":"Distributions","text":"","category":"section"},{"location":"univariatetypehierarchy/#Built-in-distributions","page":"Univariate","title":"Built-in distributions","text":"","category":"section"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"Different standardized (mean zero, variance one) distributions for z_t are available as subtypes of StandardizedDistribution. StandardizedDistribution in turn subtypes Distribution{Univariate, Continuous} from Distributions.jl, though not the entire interface need necessarily be implemented. StandardizedDistributions again hold their parameters as vectors, but convenience constructors are provided. The following are currently available:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"StdNormal, the standard normal distribution:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> StdNormal() # convenience constructor\nStdNormal{Float64}(coefs=Float64[])","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"StdT, the standardized Student's t distribution:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> StdT(3) # convenience constructor\nStdT{Float64}(coefs=[3.0])","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"StdSkewT, the standardized Hansen skewed t distribution:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> StdSkewT(3, -0.3) # convenience constructor\nStdSkewT{Float64}(coefs=[3.0, -0.3])","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"StdGED, the standardized Generalized Error Distribution:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> StdGED(1) # convenience constructor\nStdGED{Float64}(coefs=[1.0])","category":"page"},{"location":"univariatetypehierarchy/#User-defined-standardized-distributions","page":"Univariate","title":"User-defined standardized distributions","text":"","category":"section"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"Apart from the natively supported standardized distributions, it is possible to wrap a continuous univariate distribution from the Distributions package in the Standardized wrapper type. Below, we reimplement the standardized normal distribution:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> using Distributions\n\njulia> const MyStdNormal = Standardized{Normal};","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"MyStdNormal can be used whereever a built-in distribution could, albeit with a speed penalty. Note also that if the underlying distribution (such as Normal in the example above) contains location and/or scale parameters, then these are no longer identifiable, which implies that the estimated covariance matrix of the estimators will be singular.","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"A final remark concerns the domain of the parameters: the estimation process relies on a starting value for the parameters of the distribution, say thetaequiv(theta_1 ldots theta_p). For a distribution wrapped in Standardized, the starting value for theta_i is taken to be a small positive value ϵ. This will fail if ϵ is not in the domain of theta_i; as an example, the standardized Student's t distribution is only defined for degrees of freedom larger than 2, because a finite variance is required for standardization. In that case, it is necessary to define a method of the (non-exported) function startingvals that returns a feasible vector of starting values, as follows:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> const MyStdT = Standardized{TDist};\n\njulia> ARCHModels.startingvals(::Type{<:MyStdT}, data::Vector{T}) where T = T[3.]","category":"page"},{"location":"univariatetypehierarchy/#Working-with-UnivariateARCHModels","page":"Univariate","title":"Working with UnivariateARCHModels","text":"","category":"section"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"The constructor for UnivariateARCHModel takes two mandatory arguments: an instance of a subtype of UnivariateVolatilitySpec, and a vector of returns. The mean specification and error distribution can be changed via the keyword arguments meanspec and dist, which respectively default to NoIntercept and StdNormal.","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"For example, to construct a GARCH(1, 1) model with an intercept and t-distributed errors, one would do","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> spec = GARCH{1, 1}([1., .9, .05]);\n\njulia> data = BG96;\n\njulia> am = UnivariateARCHModel(spec, data; dist=StdT(3.), meanspec=Intercept(1.))\n\nGARCH{1, 1} model with Student's t errors, T=1974.\n\n\n──────────────────────────────\n                             μ\n──────────────────────────────\nMean equation parameters:  1.0\n──────────────────────────────\n─────────────────────────────────────────\n                             ω   β₁    α₁\n─────────────────────────────────────────\nVolatility parameters:     1.0  0.9  0.05\n─────────────────────────────────────────\n──────────────────────────────\n                             ν\n──────────────────────────────\nDistribution parameters:   3.0\n──────────────────────────────","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"The model can then be fitted as follows:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> fit!(am)\n\nGARCH{1, 1} model with Student's t errors, T=1974.\n\nMean equation parameters:\n─────────────────────────────────────────────\n     Estimate   Std.Error   z value  Pr(>|z|)\n─────────────────────────────────────────────\nμ  0.00227251  0.00686802  0.330882    0.7407\n─────────────────────────────────────────────\n\nVolatility parameters:\n──────────────────────────────────────────────\n      Estimate   Std.Error   z value  Pr(>|z|)\n──────────────────────────────────────────────\nω   0.00232225  0.00163909   1.41679    0.1565\nβ₁  0.884488    0.036963    23.929      <1e-99\nα₁  0.124866    0.0405471    3.07952    0.0021\n──────────────────────────────────────────────\n\nDistribution parameters:\n─────────────────────────────────────────\n   Estimate  Std.Error  z value  Pr(>|z|)\n─────────────────────────────────────────\nν   4.11211   0.400384  10.2704    <1e-24\n─────────────────────────────────────────","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"It should, however, rarely be necessary to construct a UnivariateARCHModel manually via its constructor; typically, instances of it are created by calling fit, selectmodel, or simulate.","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"note: Note\nIf you do manually construct a UnivariateARCHModel, be aware that the constructor does not create copies of its arguments. This means that, e.g., calling simulate! on the constructed model will modify your data vector:julia> mydata = copy(BG96); mydata[end]\n0.528047\n\njulia> am = UnivariateARCHModel(ARCH{0}([1.]), mydata);\n\njulia> simulate!(am);\n\njulia> mydata[end] ≈ 0.528047\nfalse","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"As discussed earlier, UnivariateARCHModel implements the interface of StatisticalModel from StatsBase, so you can call coef, coefnames, confint, dof, informationmatrix, isfitted, loglikelihood, nobs,  score, stderror, vcov, etc. on its instances:","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"julia> nobs(am)\n1974","category":"page"},{"location":"univariatetypehierarchy/","page":"Univariate","title":"Univariate","text":"Other useful methods include means, volatilities and residuals.","category":"page"},{"location":"reference/#Reference-guide","page":"Reference guide","title":"Reference guide","text":"","category":"section"},{"location":"reference/#Index","page":"Reference guide","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference guide","title":"Reference guide","text":"","category":"page"},{"location":"reference/#Public-API","page":"Reference guide","title":"Public API","text":"","category":"section"},{"location":"reference/","page":"Reference guide","title":"Reference guide","text":"DocTestFilters = r\".*[0-9\\.]\"","category":"page"},{"location":"reference/","page":"Reference guide","title":"Reference guide","text":"Modules = [ARCHModels]\nPrivate = false","category":"page"},{"location":"reference/#ARCHModels.ARCHModels","page":"Reference guide","title":"ARCHModels.ARCHModels","text":"The ARCHModels package for Julia. For documentation, see https://s-broda.github.io/ARCHModels.jl/dev.\n\n\n\n\n\n","category":"module"},{"location":"reference/#ARCHModels.BG96","page":"Reference guide","title":"ARCHModels.BG96","text":"BG96\n\nData from Bollerslev and Ghysels (JBES 1996).\n\n\n\n\n\n","category":"constant"},{"location":"reference/#ARCHModels.DOW29","page":"Reference guide","title":"ARCHModels.DOW29","text":"DOW29\n\nStock returns, in procent, from 03/19/2008 through 04/11/2019, for tickers AAPL, IBM, XOM, KO, MSFT, INTC, MRK, PG, VZ, WBA, V, JNJ, PFE, CSCO, TRV, WMT, MMM, UTX, UNH, NKE, HD, BA, AXP, MCD, CAT, GS, JPM, CVX, DIS.\n\n\n\n\n\n","category":"constant"},{"location":"reference/#ARCHModels.ARCH","page":"Reference guide","title":"ARCHModels.ARCH","text":"ARCH{q, T<:AbstractFloat} <: UnivariateVolatilitySpec{T}\n\n\n\nARCH{q}(coefs) -> UnivariateVolatilitySpec\n\nConstruct an ARCH specification with the given parameters.\n\nExample:\n\njulia> ARCH{2}([1., .3, .4])\nTGARCH{0, 0, 2} specification.\n\n──────────────────────────\n               ω   α₁   α₂\n──────────────────────────\nParameters:  1.0  0.3  0.4\n──────────────────────────\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.ARCHLMTest","page":"Reference guide","title":"ARCHModels.ARCHLMTest","text":"ARCHLMTest(am::UnivariateARCHModel, p=max(o, p, q, ...))\n\nConduct Engle's (1982) LM test for autoregressive conditional heteroskedasticity with p lags in the test regression.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.ARCHLMTest-2","page":"Reference guide","title":"ARCHModels.ARCHLMTest","text":"ARCHLMTest <: HypothesisTest\n\nEngle's (1982) LM test for autoregressive conditional heteroskedasticity.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.ARCHLMTest-Union{Tuple{T}, Tuple{Vector{T}, Integer}} where T<:Real","page":"Reference guide","title":"ARCHModels.ARCHLMTest","text":"ARCHLMTest(u::Vector, p::Integer)\n\nConduct Engle's (1982) LM test for autoregressive conditional heteroskedasticity with p lags in the test regression.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.ARCHModel","page":"Reference guide","title":"ARCHModels.ARCHModel","text":"ARCHModel <: StatisticalModel\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.ARMA","page":"Reference guide","title":"ARCHModels.ARMA","text":"ARMA{p, q, T} <: MeanSpec{T}\n\nAn ARMA(p, q) mean specification.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.ARMA-Union{Tuple{Vector{T}}, Tuple{T}, Tuple{q}, Tuple{p}} where {p, q, T}","page":"Reference guide","title":"ARCHModels.ARMA","text":"ARMA{p, q}(coefs::Vector)\n\nCreate an ARMA(p, q) model.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.CCC","page":"Reference guide","title":"ARCHModels.CCC","text":"CCC{VS<:UnivariateVolatilitySpec, T<:AbstractFloat, d} <: MultivariateVolatilitySpec{T, d}\n\n\n\nDCC(Qbar, coefs, univariatespecs; method=:largescale)\n\nConstruct a CCC specification with the given parameters. coefs must be passed as a length-zero Vector of the same element type as Qbar.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.DCC","page":"Reference guide","title":"ARCHModels.DCC","text":"DCC{p, q, VS<:UnivariateVolatilitySpec, T<:AbstractFloat, d} <: MultivariateVolatilitySpec{T, d}\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.DCC-Union{Tuple{VS}, Tuple{T}, Tuple{q}, Tuple{p}, Tuple{Matrix{T}, Vector{T}, Vector{VS}}} where {p, q, T, VS<:UnivariateVolatilitySpec{T}}","page":"Reference guide","title":"ARCHModels.DCC","text":"DCC{p, q}(Qbar, coefs, univariatespecs; method=:largescale)\n\nConstruct a DCC(p, q) specification with the given parameters.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.DQTest","page":"Reference guide","title":"ARCHModels.DQTest","text":"DQTest <: HypothesisTest\n\nEngle and Manganelli's (2004) out-of-sample dynamic quantile test.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.DQTest-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, AbstractFloat}, Tuple{Vector{T}, Vector{T}, AbstractFloat, Integer}} where T<:Real","page":"Reference guide","title":"ARCHModels.DQTest","text":"DQTest(data, vars, level, p=1)\n\nConduct Engle and Manganelli's (2004) out-of-sample dynamic quantile test with p lags in the test regression. vars shoud be a vector of out-of-sample Value at Risk predictions at level level.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.EGARCH","page":"Reference guide","title":"ARCHModels.EGARCH","text":"EGARCH{o, p, q, T<:AbstractFloat} <: UnivariateVolatilitySpec{T}\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.EGARCH-Union{Tuple{Vector{T}}, Tuple{T}, Tuple{q}, Tuple{p}, Tuple{o}} where {o, p, q, T}","page":"Reference guide","title":"ARCHModels.EGARCH","text":"EGARCH{o, p, q}(coefs) -> UnivariateVolatilitySpec\n\nConstruct an EGARCH specification with the given parameters.\n\nExample:\n\njulia> EGARCH{1, 1, 1}([-0.1, .1, .9, .04])\nEGARCH{1, 1, 1} specification.\n\n─────────────────────────────────\n                ω   γ₁   β₁    α₁\n─────────────────────────────────\nParameters:  -0.1  0.1  0.9  0.04\n─────────────────────────────────\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.GARCH","page":"Reference guide","title":"ARCHModels.GARCH","text":"GARCH{p, q, T<:AbstractFloat} <: UnivariateVolatilitySpec{T}\n\n\n\nGARCH{p, q}(coefs) -> UnivariateVolatilitySpec\n\nConstruct a GARCH specification with the given parameters.\n\nExample:\n\njulia> GARCH{2, 1}([1., .3, .4, .05 ])\nGARCH{2, 1} specification.\n\n────────────────────────────────\n               ω   β₁   β₂    α₁\n────────────────────────────────\nParameters:  1.0  0.3  0.4  0.05\n────────────────────────────────\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.Intercept","page":"Reference guide","title":"ARCHModels.Intercept","text":"Intercept{T} <: MeanSpec{T}\n\nA mean specification with just an intercept.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.Intercept-Union{Tuple{Vector{T}}, Tuple{T}} where T","page":"Reference guide","title":"ARCHModels.Intercept","text":"Intercept(mu)\n\nCreate an instance of Intercept. mu can be passed as a scalar or vector.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.MeanSpec","page":"Reference guide","title":"ARCHModels.MeanSpec","text":"MeanSpec{T}\n\nAbstract supertype that mean specifications inherit from.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.MultivariateARCHModel","page":"Reference guide","title":"ARCHModels.MultivariateARCHModel","text":"MultivariateARCHModel{T<:AbstractFloat,\n     \t\t\t\t  d,\n\t\t\t\t\t  VS<:MultivariateVolatilitySpec{T, d},\n\t\t\t\t\t  SD<:MultivariateStandardizedDistribution{T, d},\n\t\t\t\t\t  MS<:MeanSpec{T}\n\t\t\t\t\t } <: ARCHModel\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.MultivariateARCHModel-Union{Tuple{MS}, Tuple{SD}, Tuple{VS}, Tuple{d}, Tuple{T}, Tuple{VS, Matrix{T}}} where {T<:AbstractFloat, d, VS<:MultivariateVolatilitySpec{T, d}, SD<:MultivariateStandardizedDistribution, MS<:MeanSpec}","page":"Reference guide","title":"ARCHModels.MultivariateARCHModel","text":"MultivariateARCHModel(spec::MultivariateVolatilitySpec, data::Matrix;\n      \t\t\t  \t  dist=MultivariateStdNormal,\n\t\t\t\t  \t  meanspec::[NoIntercept{T}() for _ in 1:d]\n\t  \t\t\t  \t  fitted::Bool=false\n\t\t\t\t  \t  )\n\nCreate a MultivariateARCHModel.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.MultivariateStandardizedDistribution","page":"Reference guide","title":"ARCHModels.MultivariateStandardizedDistribution","text":"MultivariateStandardizedDistribution{T, d} <: Distribution{Multivariate, Continuous}\n\nAbstract supertype that multivariate standardized distributions inherit from.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.MultivariateStdNormal","page":"Reference guide","title":"ARCHModels.MultivariateStdNormal","text":"MultivariateStdNormal{T, d} <: MultivariateStandardizedDistribution{T, d}\n\nThe multivariate standard normal distribution.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.MultivariateVolatilitySpec","page":"Reference guide","title":"ARCHModels.MultivariateVolatilitySpec","text":"MultivariateVolatilitySpec{T, d} <: VolatilitySpec{T}\n\nAbstract supertype that multivariate volatility specifications inherit from.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.NoIntercept","page":"Reference guide","title":"ARCHModels.NoIntercept","text":"NoIntercept{T} <: MeanSpec{T}\n\nA mean specification without an intercept (i.e., the mean is zero).\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.NoIntercept-Union{Tuple{Vector{T}}, Tuple{T}} where T","page":"Reference guide","title":"ARCHModels.NoIntercept","text":"NoIntercept(T::Type=Float64)\nNoIntercept{T}()\nNoIntercept(v::Vector)\n\nCreate an instance of NoIntercept.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.Regression","page":"Reference guide","title":"ARCHModels.Regression","text":"Regression{k, T} <: MeanSpec{T}\n\nA linear regression as mean specification.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.Regression-Union{Tuple{T}, Tuple{Vector{T}, VecOrMat{T}}} where T","page":"Reference guide","title":"ARCHModels.Regression","text":"Regression(coefs::Vector, X::Matrix; coefnames=[β₀, β₁, …])\nRegression(X::Matrix; coefnames=[β₀, β₁, …])\nRegression{T}(X::Matrix; coefnames=[β₀, β₁, …])\n\nCreate a regression model.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.Standardized","page":"Reference guide","title":"ARCHModels.Standardized","text":"Standardized{D<:ContinuousUnivariateDistribution, T}  <: StandardizedDistribution{T}\n\nA wrapper type for standardizing a distribution from Distributions.jl.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.StandardizedDistribution","page":"Reference guide","title":"ARCHModels.StandardizedDistribution","text":"StandardizedDistribution{T} <: Distributions.Distribution{Univariate, Continuous}\n\nAbstract supertype that standardized distributions inherit from.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.StdGED","page":"Reference guide","title":"ARCHModels.StdGED","text":"StdGED{T} <: StandardizedDistribution{T}\n\nThe standardized (mean zero, variance one) generalized error distribution.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.StdGED-Tuple{Any}","page":"Reference guide","title":"ARCHModels.StdGED","text":"StdGED(p)\n\nCreate a standardized generalized error distribution parameter p. p can be passed as a scalar or vector.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.StdNormal","page":"Reference guide","title":"ARCHModels.StdNormal","text":"StdNormal(T::Type=Float64)\nStdNormal(v::Vector)\nStdNormal{T}()\n\nConstruct an instance of StdNormal.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.StdNormal-2","page":"Reference guide","title":"ARCHModels.StdNormal","text":"StdNormal{T} <: StandardizedDistribution{T}\n\nThe standard Normal distribution.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.StdSkewT","page":"Reference guide","title":"ARCHModels.StdSkewT","text":"StdSkewT{T} <: StandardizedDistribution{T}\n\nHansen's standardized (mean zero, variance one) Skewed Student's t distribution.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.StdSkewT-Tuple{Any, Any}","page":"Reference guide","title":"ARCHModels.StdSkewT","text":"StdSkewT(v,λ)\n\nCreate a standardized skewed t distribution with v degrees of freedom and λ shape parameter. ν,λ` can be passed as scalars or vectors.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.StdT","page":"Reference guide","title":"ARCHModels.StdT","text":"StdT{T} <: StandardizedDistribution{T}\n\nThe standardized (mean zero, variance one) Student's t distribution.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.StdT-Tuple{Any}","page":"Reference guide","title":"ARCHModels.StdT","text":"StdT(ν)\n\nCreate a standardized t distribution with ν degrees of freedom. ν` can be passed as a scalar or vector.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.TGARCH","page":"Reference guide","title":"ARCHModels.TGARCH","text":"TGARCH{o, p, q, T<:AbstractFloat} <: UnivariateVolatilitySpec{T}\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.TGARCH-Union{Tuple{Vector{T}}, Tuple{T}, Tuple{q}, Tuple{p}, Tuple{o}} where {o, p, q, T}","page":"Reference guide","title":"ARCHModels.TGARCH","text":"TGARCH{o, p, q}(coefs) -> UnivariateVolatilitySpec\n\nConstruct a TGARCH specification with the given parameters.\n\nExample:\n\njulia> TGARCH{1, 1, 1}([1., .04, .9, .01])\nTGARCH{1, 1, 1} specification.\n\n─────────────────────────────────\n               ω    γ₁   β₁    α₁\n─────────────────────────────────\nParameters:  1.0  0.04  0.9  0.01\n─────────────────────────────────\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.UnivariateARCHModel","page":"Reference guide","title":"ARCHModels.UnivariateARCHModel","text":"UnivariateARCHModel{T<:AbstractFloat,\n          \t\t    VS<:UnivariateVolatilitySpec,\n          \t\t\tSD<:StandardizedDistribution{T},\n          \t\t\tMS<:MeanSpec{T}\n          \t\t\t} <: ARCHModel\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.UnivariateARCHModel-Union{Tuple{MS}, Tuple{SD}, Tuple{VS}, Tuple{T}, Tuple{VS, Vector{T}}} where {T<:AbstractFloat, VS<:UnivariateVolatilitySpec, SD<:StandardizedDistribution, MS<:MeanSpec}","page":"Reference guide","title":"ARCHModels.UnivariateARCHModel","text":"UnivariateARCHModel(spec::UnivariateVolatilitySpec, data::Vector; dist=StdNormal(),\n          \t\t\tmeanspec=NoIntercept(), fitted=false\n          \t\t\t)\n\nCreate a UnivariateARCHModel.\n\nExample:\n\njulia> UnivariateARCHModel(GARCH{1, 1}([1., .9, .05]), randn(10))\n\nGARCH{1, 1} model with Gaussian errors, T=10.\n\n\n─────────────────────────────────────────\n                             ω   β₁    α₁\n─────────────────────────────────────────\nVolatility parameters:     1.0  0.9  0.05\n─────────────────────────────────────────\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.UnivariateVolatilitySpec","page":"Reference guide","title":"ARCHModels.UnivariateVolatilitySpec","text":"UnivariateVolatilitySpec{T} <: VolatilitySpec{T} end\n\nAbstract supertype that univariate volatility specifications inherit from.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.VolatilitySpec","page":"Reference guide","title":"ARCHModels.VolatilitySpec","text":"VolatilitySpec{T}\n\nAbstract supertype of UnivariateVolatilitySpec{T} and MultivariateVolatilitySpec{T} .\n\n\n\n\n\n","category":"type"},{"location":"reference/#ARCHModels.VaRs","page":"Reference guide","title":"ARCHModels.VaRs","text":"VaRs(am::UnivariateARCHModel, level=0.01)\n\nReturn the in-sample Value at Risk implied by am.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ARCHModels.correlations-Union{Tuple{MultivariateARCHModel{T, d, MVS, SD, MS} where {SD<:MultivariateStandardizedDistribution{T, d}, MS<:MeanSpec{T}}}, Tuple{MVS}, Tuple{d}, Tuple{T}} where {T, d, MVS<:DCC}","page":"Reference guide","title":"ARCHModels.correlations","text":"correlations(am::MultivariateARCHModel)\n\nReturn the estimated conditional correlation matrices.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.covariances-Union{Tuple{MultivariateARCHModel{T, d, MVS, SD, MS} where {SD<:MultivariateStandardizedDistribution{T, d}, MS<:MeanSpec{T}}}, Tuple{MVS}, Tuple{d}, Tuple{T}} where {T, d, MVS<:DCC}","page":"Reference guide","title":"ARCHModels.covariances","text":"covariances(am::MultivariateARCHModel)\n\nReturn the estimated conditional covariance matrices.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.means-Tuple{UnivariateARCHModel}","page":"Reference guide","title":"ARCHModels.means","text":"means(am::UnivariateARCHModel)\n\nReturn the conditional means of the model.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.selectmodel-Tuple{Type{<:ARMA}, Any}","page":"Reference guide","title":"ARCHModels.selectmodel","text":"selectmodel(::Type{<:ARMA}, data; kwargs...)  -> UnivariateARCHModel\n\nFit a number of ARMA{p, q} models to data and return that which minimizes the BIC.\n\nKeyword arguments:\n\ndist=StdNormal: the error distribution.\nminlags=1: minimum lag length to try in each parameter of VS.\nmaxlags=3: maximum lag length to try in each parameter of VS.\ncriterion=bic: function that takes a UnivariateARCHModel and returns the criterion to minimize.\nshow_trace=false: print criterion to screen for each estimated model.\nalgorithm=BFGS(), autodiff=:forward, kwargs...: passed on to the optimizer.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.selectmodel-Union{Tuple{MS}, Tuple{SD}, Tuple{T}, Tuple{VS}, Tuple{Type{VS}, Vector{T}}} where {VS<:UnivariateVolatilitySpec, T<:AbstractFloat, SD<:StandardizedDistribution, MS<:MeanSpec}","page":"Reference guide","title":"ARCHModels.selectmodel","text":"selectmodel(::Type{VS}, data; kwargs...) -> UnivariateARCHModel\n\nFit the volatility specification VS with varying lag lengths and return that which minimizes the BIC.\n\nKeyword arguments:\n\ndist=StdNormal: the error distribution.\nmeanspec=Intercept: the mean specification, either as a type or instance of that type.\nminlags=1: minimum lag length to try in each parameter of VS.\nmaxlags=3: maximum lag length to try in each parameter of VS.\ncriterion=bic: function that takes a UnivariateARCHModel and returns the criterion to minimize.\nshow_trace=false: print criterion to screen for each estimated model.\nalgorithm=BFGS(), autodiff=:forward, kwargs...: passed on to the optimizer.\n\nExample\n\njulia> selectmodel(EGARCH, BG96)\n\nEGARCH{1, 1, 2} model with Gaussian errors, T=1974.\n\nMean equation parameters:\n───────────────────────────────────────────────\n      Estimate   Std.Error    z value  Pr(>|z|)\n───────────────────────────────────────────────\nμ  -0.00900018  0.00943948  -0.953461    0.3404\n───────────────────────────────────────────────\n\nVolatility parameters:\n──────────────────────────────────────────────\n      Estimate  Std.Error    z value  Pr(>|z|)\n──────────────────────────────────────────────\nω   -0.0544398  0.0592073  -0.919478    0.3578\nγ₁  -0.0243368  0.0270414  -0.899985    0.3681\nβ₁   0.960301   0.0388183  24.7384      <1e-99\nα₁   0.405788   0.067466    6.0147      <1e-08\nα₂  -0.207357   0.114161   -1.81636     0.0693\n──────────────────────────────────────────────\n\n\n\n\n\n","category":"method"},{"location":"reference/#ARCHModels.simulate","page":"Reference guide","title":"ARCHModels.simulate","text":"simulate(am::ARCHModel; warmup=100, rng=Random.GLOBAL_RNG)\nsimulate(am::ARCHModel, T; warmup=100, rng=Random.GLOBAL_RNG)\nsimulate(spec::UnivariateVolatilitySpec, T; warmup=100, dist=StdNormal(), meanspec=NoIntercept(), rng=Random.GLOBAL_RNG)\n\nSimulate a length-T time series from a UnivariateARCHModel. \tsimulate(spec::MultivariateVolatilitySpec, T; warmup=100, dist=MultivariateStdNormal(), meanspec=[NoIntercept() for i = 1:d], rng=Random.GLOBAL_RNG) Simulate a length-T time series from a MultivariateARCHModel.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ARCHModels.simulate!","page":"Reference guide","title":"ARCHModels.simulate!","text":"simulate!(am::ARCHModel; warmup=100, rng=Random.GLOBAL_RNG)\n\nSimulate an ARCHModel, modifying am in place.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ARCHModels.volatilities-Union{Tuple{UnivariateARCHModel{T, VS, SD, MS} where MS<:MeanSpec{T}}, Tuple{SD}, Tuple{VS}, Tuple{T}} where {T, VS, SD}","page":"Reference guide","title":"ARCHModels.volatilities","text":"volatilities(am::UnivariateARCHModel)\n\nReturn the conditional volatilities.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.fit!-Tuple{ARCHModel}","page":"Reference guide","title":"StatsAPI.fit!","text":"fit!(am::ARCHModel; algorithm=BFGS(), autodiff=:forward, kwargs...)\n\nFit the uni- or multivariate ARCHModel specified by am, modifying am in place. Keyword arguments are passed on to the optimizer.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.fit-Tuple{ARCHModel}","page":"Reference guide","title":"StatsAPI.fit","text":"fit(am::ARCHModel; algorithm=BFGS(), autodiff=:forward, kwargs...)\n\nFit the uni- or multivariate ARCHModel specified by am and return the result in a new instance of ARCHModel. Keyword arguments are passed on to the optimizer.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.fit-Tuple{Type{<:ARMA}, Any}","page":"Reference guide","title":"StatsAPI.fit","text":"fit(t::Type{<:ARMA}, data; kwargs...) -> UnivariateARCHModel\n\nFit an ARMA{p, q} model to data.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.fit-Union{Tuple{T}, Tuple{MS}, Tuple{SD}, Tuple{VS}, Tuple{Type{VS}, Vector{T}}} where {VS<:UnivariateVolatilitySpec, SD<:StandardizedDistribution, MS<:MeanSpec, T<:AbstractFloat}","page":"Reference guide","title":"StatsAPI.fit","text":"fit(VS::Type{<:UnivariateVolatilitySpec}, data; dist=StdNormal, meanspec=Intercept,\n    algorithm=BFGS(), autodiff=:forward, kwargs...)\n\nFit the ARCH model specified by VS to data. data can be a vector or a GLM.LinearModel (or GLM.TableRegressionModel).\n\nKeyword arguments:\n\ndist=StdNormal: the error distribution.\nmeanspec=Intercept: the mean specification, either as a type or instance of that type.\nalgorithm=BFGS(), autodiff=:forward, kwargs...: passed on to the optimizer.\n\nExample: EGARCH{1, 1, 1} model without intercept, Student's t errors.\n\njulia> fit(EGARCH{1, 1, 1}, BG96; meanspec=NoIntercept, dist=StdT)\n\nEGARCH{1, 1, 1} model with Student's t errors, T=1974.\n\n\nVolatility parameters:\n──────────────────────────────────────────────\n      Estimate  Std.Error    z value  Pr(>|z|)\n──────────────────────────────────────────────\nω   -0.0162014  0.0186806  -0.867286    0.3858\nγ₁  -0.0378454  0.018024   -2.09972     0.0358\nβ₁   0.977687   0.012558   77.8538      <1e-99\nα₁   0.255804   0.0625497   4.08961     <1e-04\n──────────────────────────────────────────────\n\nDistribution parameters:\n─────────────────────────────────────────\n   Estimate  Std.Error  z value  Pr(>|z|)\n─────────────────────────────────────────\nν   4.12423    0.40059  10.2954    <1e-24\n─────────────────────────────────────────\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.fit-Union{Tuple{T}, Tuple{SD}, Tuple{Type{SD}, Vector{T}}} where {SD<:StandardizedDistribution, T<:AbstractFloat}","page":"Reference guide","title":"StatsAPI.fit","text":"fit(::Type{SD}, data; algorithm=BFGS(), kwargs...)\n\nFit a standardized distribution to the data, using the MLE. Keyword arguments are passed on to the optimizer.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.fit-Union{Tuple{d}, Tuple{T}, Tuple{VS}, Tuple{q}, Tuple{p}, Tuple{Type{<:DCC{p, q, VS}}, Matrix{T}}} where {p, q, VS<:UnivariateVolatilitySpec, T, d}","page":"Reference guide","title":"StatsAPI.fit","text":"fit(DCCspec::Type{<:DCC{p, q, VS<:UnivariateVolatilitySpec}}, data::Matrix;\n    method=:largescale,  dist=MultivariateStdNormal, meanspec=Intercept,\n    algorithm=BFGS(), autodiff=:forward, kwargs...)\n\nFit the DCC model specified by DCCspec to data. If p and q or VS are unspecified, then these default to 1, 1, and GARCH{1, 1}.\n\nKeyword arguments:\n\nmethod: one of :largescale or twostep\ndist: the error distribution.\nmeanspec: the mean specification, as a type.\nalgorithm, autodiff, kwargs, ...: passed on to the optimizer.\n\nExample: DCC{1, 1, GARCH{1, 1}} model:\n\njulia> fit(DCC, DOW29)\n\n29-dimensional DCC{1, 1} - GARCH{1, 1} - Intercept{Float64} specification, T=2785.\n\nDCC parameters, estimated by largescale procedure:\n────────────────────\n       β₁         α₁\n────────────────────\n  0.88762  0.0568001\n────────────────────\n\nCalculating standard errors is expensive. To show them, use\n`show(IOContext(stdout, :se=>true), <model>)`\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.predict-Tuple{MultivariateARCHModel}","page":"Reference guide","title":"StatsAPI.predict","text":"predict(am::MultivariateARCHModel, what=:covariance)\n\nForm a 1-step ahead prediction from am. what controls which object is predicted. The choices are :covariance (the default) or :correlation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.predict-Union{Tuple{UnivariateARCHModel{T, VS, SD, MS} where MS<:MeanSpec{T}}, Tuple{MS}, Tuple{SD}, Tuple{VS}, Tuple{T}, Tuple{UnivariateARCHModel{T, VS, SD, MS} where MS<:MeanSpec{T}, Any}, Tuple{UnivariateARCHModel{T, VS, SD, MS} where MS<:MeanSpec{T}, Any, Any}} where {T, VS, SD, MS}","page":"Reference guide","title":"StatsAPI.predict","text":"predict(am::UnivariateARCHModel, what=:volatility, horizon=1; level=0.01)\n\nForm a horizon-step ahead prediction from am. what controls which object is predicted. The choices are :volatility (the default), :variance, :return, and :VaR. The VaR level can be controlled with the keyword argument level.\n\nNot all prediction targets / volatility specifications support multi-step predictions.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.residuals-Union{Tuple{MultivariateARCHModel{T, d, MVS, SD, MS} where {SD<:MultivariateStandardizedDistribution{T, d}, MS<:MeanSpec{T}}}, Tuple{MVS}, Tuple{d}, Tuple{T}} where {T, d, MVS<:DCC}","page":"Reference guide","title":"StatsAPI.residuals","text":"residuals(am::MultivariateARCHModel; standardized = true, decorrelated = true)\n\nReturn the residuals.\n\n\n\n\n\n","category":"method"},{"location":"reference/#StatsAPI.residuals-Union{Tuple{UnivariateARCHModel{T, VS, SD, MS} where MS<:MeanSpec{T}}, Tuple{SD}, Tuple{VS}, Tuple{T}} where {T, VS, SD}","page":"Reference guide","title":"StatsAPI.residuals","text":"residuals(am::UnivariateARCHModel; standardized=true)\n\nReturn the residuals of the model. Pass standardized=false for the non-devolatized residuals.\n\n\n\n\n\n","category":"method"},{"location":"#The-ARCHModels-Package","page":"Home","title":"The ARCHModels Package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ARCH (Autoregressive Conditional Heteroskedasticity) models are a class of models designed to capture a feature of financial returns data known as volatility clustering, i.e., the fact that large (in absolute value) returns tend to cluster together, such as during periods of financial turmoil, which then alternate with relatively calmer periods.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The basic ARCH model was introduced by Engle (1982, Econometrica, pp. 987–1008), who in 2003 was awarded a Nobel Memorial Prize in Economic Sciences for its development. Today, the most popular variant is the generalized ARCH, or GARCH, model and its various extensions, due to Bollerslev (1986, Journal of Econometrics, pp. 307 - 327). The basic GARCH(1,1) model for a sample of daily asset returns r_t_tin1ldotsT is","category":"page"},{"location":"","page":"Home","title":"Home","text":"r_t=sigma_tz_tquad z_tsimmathrmN(01)quad\nsigma_t^2=omega+alpha r_t-1^2+beta sigma_t-1^2quad omega alpha beta0quad alpha+beta1","category":"page"},{"location":"","page":"Home","title":"Home","text":"This can be extended by including additional lags of past squared returns and volatilities: the GARCH(p, q) model  has q of the former and p of the latter. Another generalization is to allow  z_t to follow other, non-Gaussian distributions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package implements simulation, estimation, and model selection for the following univariate models:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ARCH(q)\nGARCH(p, q)\nTGARCH(o, p, q)\nEGARCH(o, p q)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The conditional mean can be specified as either zero, an intercept, a linear regression model, or an ARMA(p, q) model. As for error distributions, the user may choose among the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Standard Normal\nStandardized Student's t\nStandardized Hansen Skewed t\nStandardized Generalized Error Distribution","category":"page"},{"location":"","page":"Home","title":"Home","text":"For instance, a GARCH(1,1) model with a conditional mean from an AR(1) model with normally distributed errors can be esimated by fit(GARCH{1,1}, data; meanspec=AR{1}, dist=StdNormal).","category":"page"},{"location":"","page":"Home","title":"Home","text":"In addition, the following multivariate models are supported:","category":"page"},{"location":"","page":"Home","title":"Home","text":"CCC\nDCC(p, q)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ARCHModels is a registered Julia package. To install it in Julia 1.0 or later, do","category":"page"},{"location":"","page":"Home","title":"Home","text":"add ARCHModels","category":"page"},{"location":"","page":"Home","title":"Home","text":"in the Pkg REPL mode (which is entered by pressing ] at the prompt).","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This project has received funding from the European Union’s Horizon 2020 research and innovation programme under the Marie Skłodowska-Curie grant agreement No 750559.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: EU LOGO)","category":"page"}]
}
